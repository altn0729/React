* 리액트 (React)
  공식 사이트: https://reactjs.org/docs/getting-started.html
  리액트 실행: https://create-react-app.dev/docs/getting-started

- 환경설정
  Create React App: 간편하게 싱글페이지 어플리케이션을 만들때 사용
  Next JS: Server Side 렌더링을 할 때 사용
  Garsby: 정적인 사이트를 리액트를 이용해서 만들때 사용

- 유저 인터페이스를 만들 수 있는 라이브러리로 사용자에게 보여지는 UI를 만들고 그 위에서 
  사용자가 클릭을 하거나 다양한 이벤트가 발생하게 되면 그에 맞게 반응하도록 만들어진 라이브러리
  또는 웹 UI를 만드는 라이브러리이다.

  리액트를 한 단어로 정의를 하자면 컴포넌트(Component)들이라고 할 수 있다.

  리액트는 Virtual DOM Tree (가상 돔 트리)가 있다. 

  사용자가 조금 더 부드럽게 웹 어플리케이션을 이용하기 위해서는 60 frames per seconds(60fps)를 유지해야 한다.
  즉, 1초 안에 60개의 프레임이 업데이트 될 수 있도록 성능을 신경써서 만들어야 하는데 리액트는 이것을 자동으로 보장해준다.

  조금 복잡한 웹 어플리케이션을 만들 때 MVC (Model, View, Controller) 패턴을 많이 이용하는데,
  이중에서 리액트는 View Layer를 담당한다.


* 컴포넌트 (Component)

- 컴포넌트는 버튼 하나와 같이 한 가지의 기능을 수행하는 UI 단위이다.
  컴포넌트는 서로 독립적이고 잘 고립되어져 있으며, 재사용이 가능한 것을 말한다.

  컴포넌트는 다른 컴포넌트와는 독립적으로 그 컴포넌트에 해당하는 로직과 그 컴포넌트에 해당하는 state(상태)가 들어 있기 때문에
  Cohesive(응집적)이다 라고 말할 수 있다.

  리액트에서 컴포넌트를 사용하는 방법은 리액트에서 제공하는 컴포넌트라는 클래스를 상속해야 한다.
  
  class LikeButton extends Component {
      state = {
          numberOfLikes: 0,
      };

      render() {
          return <button>
            { this.state.numberOfLikes }
          </button>;
      }
  }

  export default LikeButton;

  이 컴포넌트 클래스 안에는 state 부분과 redering 하는 부분 이 두가지로 나눠 볼 수 있다.

  state: 이 컴포넌트에 들어 있는 데이터를 나타내는 오브젝트
  render(): 어떻게 사용자에게 표기될 건지 (HTML과 비슷한, 또는 JSX 라고 부른다.)를 표현

  리액트는 이 state 라는 오브젝트에 데이터가 변경이 되면 render 함수가 자동적으로 호출되는데
  이렇게 변경된 state의 값이 화면에 나타날 수 있도록 render 함수가 계속 반복적으로 호출된다.


* 가상의 돔 트리 (Virtual DOM Tree)

- 리액트의 컴포넌트들이 메모리상에 보관 되어져 있다. 즉, 바로 리액트의 모든 구조들이 돔 트리에 업데이트 되는것이 아니다.

  컴포넌트에 변동사항이 생겨 자식 컴포넌트에 render 함수가 호출이 되면
  이전의 Virtual DOM Tree와 비교해서 실질적으로 어떤 부분이 업데이트 돼야 하는지 계산한 다음 필요한 부분만 업데이트 한다.

  그래서 render 함수가 많이 호출 되어도 실질적으로 보여지는 데이터가 변동이 되지 않으면
  돔 트리에 전혀 영향을 주지 않기 때문에 성능이 떨이지지 않는다.


* 프레임워크와 라이브러리의 차이점

- 쉬운 단적인 예로 설명하자면
  프레임워크는 이미 집의 구조나 철제들이 완성된 상태의 완성품으로 벽돌의 색깔을 바꿔서 벽돌을 붙이거나
  집안의 가구를 재배치 하는 등의 일들을 할 수 있다. 

  라이브러리는 우리가 원하는 재료들을 골라서 우리의 입맛에 맞게 집을 지을 수 있다.
  그래서 조금 조금의 만들어진 재료들을 라이브러리라고 할 수 있다.

  (Frameworks)
  프레임워크의 대표적인 예는 앵귤러로 UI, Routing, State를 관리하는 방식, HTTP Clients 등등 굉장히 다양한
  기능들이 한번에 묶여서 제공된다.
  그래서 앵귤러를 이용해서 웹 어플리케이션을 만들려면 앵귤러에서 제공하는 기능들을 이용해 만들어야 한다.

  즉, 프레임워크는 정해진 골격 안에서 우리가 원하는 기능을 구현해야 한다.

  (React)
  반대로 라이브러리는 UI를 관리하는 라이브러리, 라우팅에 관련된 라이브러리들, 스테이트를 관리할 수 있는 라이브러리,
  작은 단위, 작은 도메인 안에서 자신들이 원하는 작은 부분을 구현한 것을 라이브러리라고 한다.

  프레임워크와는 다르게 따로 정해진 골격이 없기 때문에 원하는 구조의 집을 만들수 있고, 필요한 기능에 따라서
  라이브러리를 골라 사용할 수 있다.


* 리액트의 정의, 컴포넌트의 정의, 성능이 좋은 이유에 대한 짧은 정리

  리액트는 컴포넌트 단위로 이루어진 UI를 만들 수 있는 라이브러리 이다.

  컴포넌트는 독립적이고 고립되어 있으며 재사용이 가능하다.
  그렇기 때문에 테스팅(유닛테스트)을 하기가 좋다.

  이 컴포넌트는 데이터 오브젝트를 갖고 있는 state, 사용자에게 어떻게 보여줄 건지를 정의하는 render 함수가 있다.
  그리고 상태가 변화될 때 마다 render 함수가 계속 호출이 된다.

  그런데도 성능이 괜찮은 이유는 리액트 내부에 VDOM (가상의 돔 트리)이 있기 때문이다.