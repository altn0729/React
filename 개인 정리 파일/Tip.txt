<public>
index.html

<noscript>You need to enable JavaScript to run this app.</noscript>
사용자가 브라우저에서 자바스크립트를 활성화 하지 않았을 때 보여지는 메세지


<src>
- 많은 팀이나 프로젝트에 따라서 파일명이나 프로젝트 구조를 다르게 잡아갈 수 있지만 보통은 src 폴더 안에 공통적으로 사용하는 components라고 폴더를 만들어 놓는다.

- 보통 파일명 맨 앞에는 대문자 보다는 소문자를 쓴다.

- 리액트 프로젝트는 명확한 구분을 위해 순수 자바스크립트로 되어 있는 js 파일, 컴포넌트 파일인 jsx 파일로 확장명을 잘 나눠줘야 한다.

- index.js 파일에서 컴포넌트들을 연결해준다.

- react-dom: 브라우저가 이해할 수 있는 것은 HTML, CSS, JavaScript만을 이용할 수 있다.
             그래서 이 언어 이외에 다른 언어들을 이해시키기 위해 BABEL을 이용해 순수 자바스크립트로 변환된다.
             그리고 이 변환된 파일들을 즉, 컴포넌트를 HTML과 연결하는 작업을 해 줘야 하는데 그것을 도와주는 것이 react-dom 이다.

- React.StrictMode: 자바스크립트의 use strict 처럼 코드에 문제가 있을 경우 Console log 에서 알려준다.
                    배포될 때는 알아서 제외되기 때문에 사용자는 에러 메세지를 볼 수 없다.

- state: 그 컴포넌트에서 갖고 있는 데이터
- props: 내 컴포넌트에서 갖고 있는 state가 아닌 부모로 부터 받은 혹은 전달된 properties의 약자

<react tag>
- className: 자바스크립트에서 class=""가 아닌 className="" 라고 지정

- onClick: 자바스크립트에서 onclick=""가 아닌 onClick="" 라고 지정 또한 데이터 삽입을 할 땐 onClick="{}" 이런식으로 중괄호 사용

- React.Fragment or <>: JSX는 형제 태그를 같이 쓸 수 없어서 이런식으로 사용한다.
                        <React.Fragment>
                            <h1>Hello {name}</h1>
                            <h1>React</h1>
                        </React.Fragment>

                        // 이것 저것 활용 방법
                        function App() {
                        const name = undefined;

                        return (
                                <>
                                <h1>Hello</h1>
                                {name && <h1>Hello! {name} ;)</h1>}
                                {['Frist', 'Second'].map(item =>
                                    (<h1>{item}</h1>)
                                )}
                                </>
                            );
                        }

- React에서 리스트(ul, li tag), 자식 컴포넌트가 있으면 고유의 키를 꼭 갖고 있어야 한다.

- input tag에서 데이터를 보낼때 inputRef를 사용한다.
  
  // Ref와 DOM: https://ko.reactjs.org/docs/refs-and-the-dom.html
  inputRef = React.createRef();

- 여러 하위(자식) 컴포넌트에서 공통적으로 쓰이는 데이터라면, 
  제일 가까운 부모 컴포넌트 (하위 컴포넌트를 아우리는, 공통적인 로직이 있는)에서
  State와 그 State를 변경하는 로직을 가지고 있는것이 좋다.

- rcc: class component 단축어
  rsi: function component 단축어

<yarn package>
- 폰트어썸: yarn add @fortawesome/fontawesome-free
           import '@fortawesome/fontawesome-free/js/all.js';

<배포 Git hub 버전>
- Github에 있는 원격의 주소를 나의 로컬에 있는 Git 파일과 연결
  명령어: git remote add origin git@github.com:altn0729/경로...

  이때까지 작업한 파일이 있다면 
  명령어: git add *

  그 후
  명령어: git commit -m "작성한 내용"

  커밋까지 끝낸 후
  명령어: git push 또는 git push -u origin master

- Git을 하는 중 문제가 생길 경우 로그를 찾아본다.
  명령어: open ~/.gitconfig

- package.json에 설정을 추가한다.
  "homepage": https://altn0729.github.io/webPortfolio/,

  그리고 얀을 사용하기 때문에 얀 패키지를 설치 해준다.
  명령어: yarn add gh-pages
  명령어: npm install --save gh-pages (얀 사용 안할 경우)

  그 후 package.json의 scripts 부분에 해당 문장을 추가해준다.
  "predeploy": "npm run build",
  "deploy": "gh-pages -d build",

  그 다음 빌드를 하면 배포용 폴더가 새로 만들어진다.
  명령어: yarn build

  마지막으로
  명령어: npm run deploy

  명령어 까지 완료가 되면 깃 홈페이지에 가서 settings에 branch 부분을
  gh-pages.. 으로 바꾸면 된다.

- 공식 사이트: https://create-react-app.dev/docs/deployment/#github-pages

<배포 Netlify 버전>
- 일단 Netlify를 글로벌 설치한다.
  명령어: npm install netlify-cil -g

  그 다음 배포할 폴더로 가서
  명령어: netlify deploy 

  그 후 create & configure a new site를 선택한다.
  팀 이름, 사이트 이름, 퍼블리시 디렉토리는 Build 폴더로 설정해준다.

  임시로 생성된 URL 주소에서 이슈(동작)를 잘 하는지 확인한 후 명령어 실행
  명령어: netlify deploy --prod

  - 공식 사이트: https://create-react-app.dev/docs/deployment/#github-pages
